# /**
#  * @file docker-compose.yml
#  * @author Azmi ŞAHİN (azmisahin@outlook.com)
#  * @brief running multi-container Docker applications.
#  * @version 0.1.5
#  * @date 2022-01-01
#  *
#  * @copyright Copyright (c) 2022
#  */
version: "3.9" # optional since v1.27.0
services:

  # application
  application:

    container_name: ${APP_NAME}-${ENV}-${CONTAINER}

    build:
      context: .
      dockerfile: Dockerfile.${CONTAINER}
      args:
        # Update 'VARIANT' to pick an LTS version of Node.js: 18, 16, 14.
        # Append -bullseye or -buster to pin to an OS version.
        # Use -bullseye variants on local arm64/Apple Silicon.
        VARIANT: 16-bullseye
        # build
        APP_NAME: ${APP_NAME}
        WORK_DIR: ${WORK_DIR}
        BUILD_DIR: ${BUILD_DIR}
        DIST_DIR: ${DIST_DIR}
        # application
      labels:
        com.azmisahin.description: ${APP_NAME}
        com.azmisahin.department: "DEVOPS"
      # stage
      target: ${ENV}

    environment:
      # build
      APP_NAME: ${APP_NAME}
      WORK_DIR: ${WORK_DIR}
      BUILD_DIR: ${BUILD_DIR}
      DIST_DIR: ${DIST_DIR}
      # application

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    # network_mode: service:xxx

    # Uncomment the next line to use a non-root user for all processes.
    # user: node

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # data service application

    # data service
  data-service:
    container_name: "${DATABASE_SERVICE_NAME}"
    image: postgres:${DATABASE_SERVICE_VERSION}
    ports:
      - "${DATABASE_SERVICE_HOST_PORT}:${DATABASE_SERVICE_APP_PORT}"
    volumes:
      - "../data/service:/docker-entrypoint-initdb.d"
    environment:
      # product
      ENV: "${ENV}"
      APP_NAME: "${APP_NAME}"

      # postgres sql
      POSTGRES_USER: "${DATABASE_SERVICE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_SERVICE_PASSWORD}"
      POSTGRES_DB: "${DATABASE_SERVICE_CATALOG}"

      # data service
      DATABASE_SERVICE_VENDOR: "${DATABASE_SERVICE_VENDOR}"
      DATABASE_SERVICE_VERSION: "${DATABASE_SERVICE_VERSION}"
      DATABASE_SERVICE_NAME: "${DATABASE_SERVICE_NAME}"
      DATABASE_SERVICE_DOMAIN: "${DATABASE_SERVICE_DOMAIN}"
      DATABASE_SERVICE_HOST_PORT: "${DATABASE_SERVICE_HOST_PORT}"
      DATABASE_SERVICE_APP_PORT: "${DATABASE_SERVICE_APP_PORT}"
      DATABASE_SERVICE_USER: "${DATABASE_SERVICE_USER}"
      DATABASE_SERVICE_PASSWORD: "${DATABASE_SERVICE_PASSWORD}"
      DATABASE_SERVICE_CATALOG: "${DATABASE_SERVICE_CATALOG}"

      # data service ui
      DATABASE_SERVICE_UI_HOST_PORT: "${DATABASE_SERVICE_UI_HOST_PORT}"
      PGADMIN_DEFAULT_EMAIL: "${AUTHORIZED_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${AUTHORIZED_PASSWORD}"

  # data service ui application
  data-service-ui:
    container_name: "${DATABASE_SERVICE_UI_NAME}"
    image: dpage/pgadmin4
    ports:
      - "${DATABASE_SERVICE_UI_HOST_PORT}:${DATABASE_SERVICE_UI_APP_PORT}"
    volumes:
      # This ensures that the connection information is preloaded into the pgAdmin instance in the container.
      - "../data/service-ui/servers.json:/pgadmin4/servers.json"
    environment:
      # product
      ENV: "${ENV}"

      # data service ui
      PGADMIN_DEFAULT_EMAIL: "${AUTHORIZED_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${AUTHORIZED_PASSWORD}"
    links:
      - ${APP_NAME}:${APP_NAME}
    depends_on:
      - ${APP_NAME}
